---
layout: post
title: "Academia Hacker - WriteUp - Semana 8"
subtitle: "#CTF writeUp"
date: 2021-07-20 23:36:00 +0100
background: '/img/posts/06.jpg'
---



<div align="justify">
<h1 class="code-line" data-line-start=0 data-line-end=1 ><a id="Academia_Hacker_Incibe__writeUp__8_semana_0"></a>Academia Hacker Incibe - #writeUp - 8 semana</h1>
<p class="has-line-data" data-line-start="2" data-line-end="3"><img src="https://ch4m17ux.github.io/img/posts/academia-hacker/academia-hacker-incibe.jpg" alt="Academia Hacker"></p>
<p class="has-line-data" data-line-start="4" data-line-end="5">Durante el mes de Mayo y Junio de 2021, estuvimos participando en Academia Hacker.  Una iniciativa de <a href="https://www.incibe.es/">Incibe</a> para formar y encontrar las capacidades en Ciberseguridad.</p>

<hr>
<blockquote>
<h3 class="code-line" data-line-start=9 data-line-end=10 ><a id="Disclaimer_9"></a>Disclaimer:</h3>
<p class="has-line-data" data-line-start="10" data-line-end="12">Estas entradas no pretenden indicar que sea la unica forma de solucionar, todo se realiza de forma academica, cualquier errata se agradece que sea reportada para poder subsanar.<br>
Espero que os guste y aprendamos juntos. #HackThePlanet</p>
</blockquote>
<h1 class="code-line" data-line-start=14 data-line-end=15 ><a id="TLDR_14"></a>TL:DR</h1>
<hr>
<h2 class="code-line" data-line-start=17 data-line-end=18 ><a id="Reto_36_17"></a><strong>Reto 36</strong></h2>
<p class="has-line-data" data-line-start="19" data-line-end="20">Nos entregan la descripción del reto:</p>
<blockquote>
<p class="has-line-data" data-line-start="21" data-line-end="22"><strong><em>DESCRIPCION</em></strong>:</p>
<p class="has-line-data" data-line-start="23" data-line-end="24">En uno de los laboratorios de computación encuentras una máquina apagada con un post-it en el lateral: “/root/Desktop/reto36/reversesecret - Resolver mediante ingeniería inversa”.</p>
<p class="has-line-data" data-line-start="25" data-line-end="26">Parece que te animas a encender el ordenador, un viejo pentium que todavía arranca. Guardas el fichero a tu máquina para trabajar cómodamente y empiezas el desafío.</p>
<p class="has-line-data" data-line-start="27" data-line-end="30">Al reverso del post-it se puede leer: “Enviar flag a mi número personal, se recompensará”<br>
Pregunta:<br>
¿Qué condiciones necesitará este binario para que imprima la flag?</p>
<p class="has-line-data" data-line-start="31" data-line-end="32"><strong>Datos proporcionados:</strong></p>
<p class="has-line-data" data-line-start="33" data-line-end="34">Fichero binario.</p>
</blockquote>
<p class="has-line-data" data-line-start="35" data-line-end="36">Previamente en IDA PRO se ve que la rutina inicial pide 3 argumentos y que hay hasta 4 checks diferentes.</p>
<p class="has-line-data" data-line-start="37" data-line-end="38"><img src="https://ch4m17ux.github.io/img/posts/academia-hacker/reto36-1.png" alt="Academia Hacker"></p>
<p class="has-line-data" data-line-start="39" data-line-end="40">Arrancamos maquina virtual de Incibe e instalamos un debugger edb:</p>
<p class="has-line-data" data-line-start="41" data-line-end="42">Instalamos el debugger</p>
<pre><code class="has-line-data" data-line-start="43" data-line-end="46" class="language-bash">┌──(root@kali)-[~/]
└─<span class="hljs-comment"># sudo apt install edb-debugger</span>
</code></pre>
<p class="has-line-data" data-line-start="46" data-line-end="47">Arrancamos el debugger</p>
<pre><code class="has-line-data" data-line-start="48" data-line-end="51" class="language-bash">┌──(root@kali)-[~/]
└─<span class="hljs-comment"># edb</span>
</code></pre>
<p class="has-line-data" data-line-start="51" data-line-end="52">Abrimos el archivo que queremos debuggar introduciendo 3 parametros al azar.</p>
<p class="has-line-data" data-line-start="53" data-line-end="54"><img src="https://ch4m17ux.github.io/img/posts/academia-hacker/reto36-2.png" alt="Academia Hacker"></p>
<p class="has-line-data" data-line-start="55" data-line-end="56">Empezamos a debuggar con F8 y F7 Para llegar donde queremos….</p>
<p class="has-line-data" data-line-start="57" data-line-end="58">La idea es llegar a los checks para poder quitarlos y ver si son necesarios o simplemente se pueden bypasear…</p>
<p class="has-line-data" data-line-start="59" data-line-end="60">Con F8 llegamos hasta las rutinas de ejecución y sus correspondientes “JE”. Pasamos y cuando lleguemos a los JE, botón derecho del ratón encima -&gt; Edit -&gt;</p>
<p class="has-line-data" data-line-start="61" data-line-end="62"><img src="https://ch4m17ux.github.io/img/posts/academia-hacker/reto36-3.png" alt="Academia Hacker"></p>
<p class="has-line-data" data-line-start="63" data-line-end="64"><img src="https://ch4m17ux.github.io/img/posts/academia-hacker/reto36-4.png" alt="Academia Hacker"></p>
<p class="has-line-data" data-line-start="65" data-line-end="66">Esta accion la hacemos en los 3 primeros checks y seguimos con F8 …</p>
<p class="has-line-data" data-line-start="67" data-line-end="68">Hasta que el programa acaba con return “0” -&gt; SIN FALLOS….</p>
<p class="has-line-data" data-line-start="69" data-line-end="70">Vemos el log que aparece en la ventana del propio programa… Por detrás….</p>
<p class="has-line-data" data-line-start="71" data-line-end="72"><img src="https://ch4m17ux.github.io/img/posts/academia-hacker/reto36-5.png" alt="Academia Hacker"></p>
<p class="has-line-data" data-line-start="73" data-line-end="74"><strong><em>flag{g00d_j0b_reversers}</em></strong></p>
<hr>
<h2 class="code-line" data-line-start=76 data-line-end=77 ><a id="Reto_37_76"></a><strong>Reto 37</strong></h2>
<p class="has-line-data" data-line-start="78" data-line-end="79">Nos entregan la descripción del reto:</p>
<blockquote>
<p class="has-line-data" data-line-start="80" data-line-end="81"><strong><em>DESCRIPCION</em></strong>:</p>
<p class="has-line-data" data-line-start="82" data-line-end="83">Os llega un mensaje a vuestro Telegram, de una persona que no conocéis. El mensaje solamente pone “Escuchadlo”, y un mp3.</p>
<p class="has-line-data" data-line-start="84" data-line-end="86">Pregunta:<br>
¿Qué esconde el archivo de sonido? ¿Solamente es una canción?</p>
<p class="has-line-data" data-line-start="87" data-line-end="88"><strong>Datos proporcionados:</strong></p>
<p class="has-line-data" data-line-start="89" data-line-end="90">Archivo de audio con codificación MP3</p>
</blockquote>
<p class="has-line-data" data-line-start="91" data-line-end="92">El archivo de audio es la 5ª Sinfonía de Beethoven. Además, tiene 3 zonas superpuestas de un código morse.</p>
<p class="has-line-data" data-line-start="93" data-line-end="94"><img src="https://ch4m17ux.github.io/img/posts/academia-hacker/reto37-1.png" alt="Academia Hacker"></p>
<p class="has-line-data" data-line-start="95" data-line-end="96">El archivo final está normalizado y tiene este aspecto, evitando que se pueda detectar esto de una forma sencilla.</p>
<p class="has-line-data" data-line-start="97" data-line-end="98"><img src="https://ch4m17ux.github.io/img/posts/academia-hacker/reto37-2.png" alt="Academia Hacker"></p>
<p class="has-line-data" data-line-start="99" data-line-end="100">Al parecer es una pista normal en estéreo, pero en las posiciones de unión se escucha un ligero pitido.</p>
<p class="has-line-data" data-line-start="101" data-line-end="102">La unión hace que la pista en morse se centre más en el lado izquierdo (donde era sordo Beethoven) y su sinfonía en la parte derecha. Si se sitúa que solo se quiere escuchar la pista izquierda, el código morse es más claro.</p>
<p class="has-line-data" data-line-start="103" data-line-end="104">Al realizar la mezcla de sonidos, la carga del código morse ha sido un 100% a la izquierda, y la carga de la sinfonía un 90% hacia la derecha. Esto provoca que ambas se pueden escuchar tanto a un lado como al otro, pero el volumen con el que se escucha no es el mismo.</p>
<p class="has-line-data" data-line-start="105" data-line-end="106">Teniendo en cuenta que un pitido largo es un guion y uno corto un punto (nomenclatura estándar para escritura morse), lo que nos encontramos dentro del audio es la siguiente codificación durante 3 secuencias separadas a lo largo de la canción:</p>
<p class="has-line-data" data-line-start="107" data-line-end="108">… -.-- – .–. … — -. -.–</p>
<p class="has-line-data" data-line-start="109" data-line-end="110">Que descodificado significa: <strong>5YMPHONY</strong></p>
<p class="has-line-data" data-line-start="111" data-line-end="112">Las secuencias se pueden encontrar en las siguientes posiciones del audio:</p>
<ul>
<li class="has-line-data" data-line-start="113" data-line-end="114">1m 6s</li>
<li class="has-line-data" data-line-start="114" data-line-end="115">2m 39s</li>
<li class="has-line-data" data-line-start="115" data-line-end="117">6m 44s</li>
</ul>
<p class="has-line-data" data-line-start="117" data-line-end="118">Además, el audio tiene al final del archivo un zip comprimido con contraseña.</p>
<p class="has-line-data" data-line-start="119" data-line-end="121"><img src="https://ch4m17ux.github.io/img/posts/academia-hacker/reto37-3.png" alt="Academia Hacker"><br>
Una vez extraído este archivo zip, se puede usar la contraseña obtenida del código morse para descomprimir el archivo y obtener el flag, ya de dentro del zip hay un archivo “flag.txt”.</p>
<p class="has-line-data" data-line-start="122" data-line-end="123"><strong><em>flag{ES_14_5ª_S1nfonIA}</em></strong></p>
<hr>
<h2 class="code-line" data-line-start=125 data-line-end=126 ><a id="Reto_38_125"></a><strong>Reto 38</strong></h2>
<p class="has-line-data" data-line-start="127" data-line-end="128">Nos entregan la descripción del reto:</p>
<blockquote>
<p class="has-line-data" data-line-start="129" data-line-end="130"><strong><em>DESCRIPCION</em></strong>:</p>
<p class="has-line-data" data-line-start="131" data-line-end="132">Distintos profesores de diversas materias se han puesto de acuerdo para confeccionar un rompecabezas para sus alumnos usando los conocimientos adquiridos para subir la nota global</p>
<p class="has-line-data" data-line-start="133" data-line-end="135">Pregunta<br>
¿Puedes resolver el rompecabezas y encontrar el mensaje oculto?</p>
<p class="has-line-data" data-line-start="136" data-line-end="137">Nota: una vez resuelto el mensaje debe entregarse como flag{mensaje}, quedando el mensaje libre de espacios</p>
<p class="has-line-data" data-line-start="138" data-line-end="139"><strong>Datos proporcionados:</strong></p>
<ol>
<li class="has-line-data" data-line-start="140" data-line-end="141">flag.txt</li>
<li class="has-line-data" data-line-start="141" data-line-end="142">1.png</li>
<li class="has-line-data" data-line-start="142" data-line-end="143">2.jpg</li>
<li class="has-line-data" data-line-start="143" data-line-end="144">file</li>
</ol>
</blockquote>
<p class="has-line-data" data-line-start="145" data-line-end="146">Nos dan la siguiente información en el fichero flag.txt:</p>
<pre><code class="has-line-data" data-line-start="148" data-line-end="161" class="language-bash">Modell 
<span class="hljs-number">1</span>.png + <span class="hljs-number">2</span>.jpg
Walzenlage     Posición del rodillo
V II III
Stellung       posición
file extension
Ringstellung   Posición del anillo
<span class="hljs-number">13</span> <span class="hljs-number">17</span> <span class="hljs-number">04</span>
---- Steckerverbindungen ----
gu cr di ej kw mt ps ox qz bh Conexiones de enchufe
<span class="hljs-comment">######################################################################</span>
niwyy lufqj yeegx hpbas wnkky gtwwd rxmhs cczuh trtsu lssje idaxh axzj
</code></pre>
<p class="has-line-data" data-line-start="162" data-line-end="163">Junto con esta información tenemos dos imágenes:</p>
<p class="has-line-data" data-line-start="164" data-line-end="165"><img src="https://ch4m17ux.github.io/img/posts/academia-hacker/reto38-1.png" alt="Academia Hacker"></p>
<p class="has-line-data" data-line-start="166" data-line-end="167"><img src="https://ch4m17ux.github.io/img/posts/academia-hacker/reto38-2.png" alt="Academia Hacker"></p>
<p class="has-line-data" data-line-start="168" data-line-end="169">La primera imagen nos indica que es una maquina “ENIGMA 1” y la segunda haciendo un poco de OSINT encontramos que es una foto de NORUEGA</p>
<p class="has-line-data" data-line-start="170" data-line-end="171">Además nos dan un fichero sin extensión (file) que aparece como datos. No tiene nada que nos permita saber que fichero es (Magic Bytes) pero haciendo un strings apunta a aplicación android.</p>
<p class="has-line-data" data-line-start="172" data-line-end="173">Descargo un APK que es un ZIP con muchos ficheros dentro y voy probando todos los que aparecen hasta que aparece un texto legible.</p>
<p class="has-line-data" data-line-start="174" data-line-end="175">Uniendo toda esta informacion, utilizamos una web que nos permite decodificar mensajes de maquinas Enigma.</p>
<p class="has-line-data" data-line-start="176" data-line-end="177"><img src="https://ch4m17ux.github.io/img/posts/academia-hacker/reto38-3.png" alt="Academia Hacker"></p>
<p class="has-line-data" data-line-start="178" data-line-end="180">Encontramos la flag que nos solicitan:<br>
<strong><em>flag{enhorabuenaahoraestaslistoparalosmensajesentiemposdificiles}</em></strong></p>
<hr>
<h2 class="code-line" data-line-start=182 data-line-end=183 ><a id="Reto_39_182"></a><strong>Reto 39</strong></h2>
<p class="has-line-data" data-line-start="184" data-line-end="185">Nos entregan la descripción del reto:</p>
<blockquote>
<p class="has-line-data" data-line-start="186" data-line-end="187"><strong><em>DESCRIPCION</em></strong>:</p>
<p class="has-line-data" data-line-start="188" data-line-end="189">Un inspector de la administración se ha olvidado un pen drive en la mesa de la sala multiusos. Hemos encontrado en su interior un script en PowerShell ofuscado.</p>
<p class="has-line-data" data-line-start="190" data-line-end="192">Pregunta:<br>
¿Podrías analizarlo y descubrir que esconde?</p>
<p class="has-line-data" data-line-start="193" data-line-end="194"><strong>Datos proporcionados:</strong></p>
<p class="has-line-data" data-line-start="195" data-line-end="196">Script en PowerShell descargable</p>
</blockquote>
<p class="has-line-data" data-line-start="197" data-line-end="198">Primero Tenemos Que Desofuscar El Codigo:</p>
<p class="has-line-data" data-line-start="199" data-line-end="200"><img src="https://ch4m17ux.github.io/img/posts/academia-hacker/reto39-1.png" alt="Academia Hacker"></p>
<p class="has-line-data" data-line-start="201" data-line-end="202">Cambiamos la cantidad de guiones por el valor. Si tenemos — lo cambiamos por 3, si tenemos ---------- se cambia por A. Parece ser una secuencia Hexadecimal.</p>
<p class="has-line-data" data-line-start="203" data-line-end="204"><img src="https://ch4m17ux.github.io/img/posts/academia-hacker/reto39-2.png" alt="Academia Hacker"></p>
<p class="has-line-data" data-line-start="205" data-line-end="206">Tras esto añadimos un echo al final con la parte mas grande del código para que nos diga que tenemos ahí.</p>
<p class="has-line-data" data-line-start="207" data-line-end="208"><img src="https://ch4m17ux.github.io/img/posts/academia-hacker/reto39-3.png" alt="Academia Hacker"></p>
<p class="has-line-data" data-line-start="209" data-line-end="210">Si ejecutamos este código nos da lo siguiente:</p>
<p class="has-line-data" data-line-start="211" data-line-end="212"><img src="https://ch4m17ux.github.io/img/posts/academia-hacker/reto39-4.png" alt="Academia Hacker"></p>
<p class="has-line-data" data-line-start="213" data-line-end="214">Si Quitamos “Char&quot; Nos Quedan Un Monton De Valores:</p>
<p class="has-line-data" data-line-start="215" data-line-end="216"><img src="https://ch4m17ux.github.io/img/posts/academia-hacker/reto39-5.png" alt="Academia Hacker"></p>
<p class="has-line-data" data-line-start="217" data-line-end="218">Si Pasamos Todos Estos Valores a <code>Hex</code> Y Luego a <code>Ascii</code> Tenemos:</p>
<pre><code class="has-line-data" data-line-start="220" data-line-end="230" class="language-bash">Write-Host -BackgroundColor white -ForegroundColor blue <span class="hljs-string">"Executing the process..."</span>
<span class="hljs-variable">$n</span> = <span class="hljs-variable">$MyInvocation</span>.MyCommand.Name
<span class="hljs-keyword">if</span> (<span class="hljs-variable">$n</span>.substring(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">-eq</span> <span class="hljs-string">'k'</span>){
        <span class="hljs-comment">#$xorkey = "try brute force!"</span>
        Write-Host <span class="hljs-string">"Flag: V15SU05yAlEDUAZpYQJEB0dlWQFfWGplBVFQB0ZFVwZfSQ=="</span>
        Write-Host -BackgroundColor green -ForegroundColor white <span class="hljs-string">"CONGRATZ!"</span>
        <span class="hljs-built_in">exit</span>
}
Write-Host -BackgroundColor red -ForegroundColor white <span class="hljs-string">"TRY HARDER!"</span>
</code></pre>
<p class="has-line-data" data-line-start="230" data-line-end="231">Obtenemos un string en Base64, y nos estan indicando que debemos realizar un XoR brute force, si lo intentamos tal como nos indican, vemos que no llegamos a buen puerto. Sin embargo, conocemos que:</p>
<p class="has-line-data" data-line-start="232" data-line-end="235">El xor es auto inverso<br>
Asi que a ^ b = c<br>
y tambien a ^ c = b</p>
<p class="has-line-data" data-line-start="236" data-line-end="237">Por lo que conocemos dos partes de la ecuacion: El codigo cifrado y lo que deberia ser parte del texto claro. Si lo pasamos por cyberchef obtenemos:</p>
<p class="has-line-data" data-line-start="238" data-line-end="239"><img src="https://ch4m17ux.github.io/img/posts/academia-hacker/reto39-6.png" alt="Academia Hacker"></p>
<p class="has-line-data" data-line-start="240" data-line-end="241">Asi que la clave comienza por “12345”, podemos ponerla como key e ir completando hasta que nos de la flag.</p>
<p class="has-line-data" data-line-start="242" data-line-end="243"><img src="https://ch4m17ux.github.io/img/posts/academia-hacker/reto39-7.png" alt="Academia Hacker"></p>
<p class="has-line-data" data-line-start="244" data-line-end="245"><strong><em>flag{D3c0d3_P0w3rSh3ll_S4cc3ssf4l}</em></strong></p>
<hr>
<h2 class="code-line" data-line-start=247 data-line-end=248 ><a id="Reto_40_247"></a><strong>Reto 40</strong></h2>
<p class="has-line-data" data-line-start="249" data-line-end="250">Nos entregan la descripción del reto:</p>
<blockquote>
<p class="has-line-data" data-line-start="251" data-line-end="252"><strong><em>DESCRIPCION</em></strong>:</p>
<p class="has-line-data" data-line-start="253" data-line-end="254">El profesor de matemáticas es alguien muy cercano, se ha interesado  por vuestro club de CTFs y os ha enviado un mensaje cifrado donde  asegura que con los datos proporcionados se podrá descifrar.</p>
<p class="has-line-data" data-line-start="255" data-line-end="256">Como premio al primero que lo consiga … ¡Le aumentará 1 punto la nota final!</p>
<p class="has-line-data" data-line-start="257" data-line-end="259">Pregunta:<br>
¿Cual es el mensaje cifrado?</p>
<p class="has-line-data" data-line-start="260" data-line-end="261"><strong>Datos proporcionados:</strong></p>
<p class="has-line-data" data-line-start="262" data-line-end="263">Fichero python</p>
</blockquote>
<p class="has-line-data" data-line-start="264" data-line-end="265">El participante recibirá un fichero <code>reto40.py</code> con el código con el que se ha cifrado la flag. Este código es el siguiente:</p>
<pre><code class="has-line-data" data-line-start="267" data-line-end="278" class="language-bash"><span class="hljs-comment">#!/usr/bin/env python3</span>
from Crypto.Util.number import *
import gmpy2, binascii
from myrsa import myreal_p, myreal_q
from oximoron import flag
n = myreal_p * myreal_q
e = <span class="hljs-number">0</span>x10001
ciphertext = binascii.hexlify(long_to_bytes(pow(bytes_to_long(flag), e, n)))
file = open(<span class="hljs-string">'secret.enc'</span>, <span class="hljs-string">'w'</span>)
file.write(<span class="hljs-string">"cipher: {}\nn: {}\ne: "</span>.format(ciphertext, str(n), str(e)))
</code></pre>
<p class="has-line-data" data-line-start="279" data-line-end="280">Este código produce un secret.enc con la información de flag cifrada, el valor para <code>N</code> y el exponente <code>E</code>. No da mas datos para p y q, valores que deben ser deducidos ya que la factorización de <code>N</code> es <code>p*q</code>.</p>
<p class="has-line-data" data-line-start="281" data-line-end="282">El contenido de secret es el siguiente:</p>
<pre><code class="has-line-data" data-line-start="284" data-line-end="292" class="language-bash">secret: 
b<span class="hljs-string">'55d4e09b61c53557c2a265141206ba394a92648e290c0377ca58aec1b6811254125590ea3393563c485b
ad44cd5c80b85c219927a8bea340a4aa39dd7310afca'</span>
N: 
<span class="hljs-number">8732851030901103315546024107527412423460054120791582645327296072030149520595598830189</span>
<span class="hljs-number">737190136429774375847088648891282895380791041462467946364644597106651</span>
E: <span class="hljs-number">65537</span>
</code></pre>
<p class="has-line-data" data-line-start="293" data-line-end="294">Para esto accedemos a factordb y factorizamos el valor de N</p>
<p class="has-line-data" data-line-start="295" data-line-end="296"><img src="https://ch4m17ux.github.io/img/posts/academia-hacker/reto40-1.png" alt="Academia Hacker"></p>
<pre><code class="has-line-data" data-line-start="297" data-line-end="302" class="language-bash">p = <span class="hljs-number">8943499445052244503125097349497546991018505772383891525</span>
<span class="hljs-number">7965779692637908486619</span>
q = <span class="hljs-number">9764467571731469302829928738214358161149910425174602655</span>
<span class="hljs-number">2841672042065803811329</span>
</code></pre>
<p class="has-line-data" data-line-start="303" data-line-end="304">Seguidamente, viendo el archivo Python “<a href="http://reto40.py">reto40.py</a>” podemos ver que la flag está cifrada con un binascii.hexlify y long_to_bytes.</p>
<p class="has-line-data" data-line-start="305" data-line-end="306">Viendo en la base de conocimientos de Python &gt; binascii vemos que hexlify devuelve la representación hexadecimal de los datos binarios. Cada byte de datos se convierte en la correspondiente representación hexadecimal de 2 dígitos. El objeto bytes devuelto es, por tanto, el doble de largo que la longitud de los datos. (binascii — Convert between binary and ASCII — Python 3.9.5 documentation)</p>
<p class="has-line-data" data-line-start="307" data-line-end="308">También vemos que hay una manera de invertir este cifrado con binascii.unhexlify (binascii — Convert between binary and ASCII — Python 3.9.5 documentation)</p>
<p class="has-line-data" data-line-start="309" data-line-end="310">Haremos lo mismo con la transformación “long_to_bytes”, que la pasaremos a “bytes_to_long”.</p>
<p class="has-line-data" data-line-start="311" data-line-end="312">Con todo esto ya podemos generar el script para descifrar el valor:</p>
<pre><code class="has-line-data" data-line-start="314" data-line-end="332" class="language-bash"><span class="hljs-comment">#!/usr/bin/env python3</span>

from Crypto.Util.number import *
import binascii

n = <span class="hljs-number">8732851030901103315546024107527412423460054120791582645327296072030149520595598830189737190136429774375847088648891282895380791041462467946364644597106651</span>
e = <span class="hljs-number">65537</span>
c = bytes_to_long(binascii.unhexlify(<span class="hljs-string">"55d4e09b61c53557c2a265141206ba394a92648e290c0377ca58aec1b6811254125590ea3393563c485bad44cd5c80b85c219927a8bea340a4aa39dd7310afca"</span>))

p = <span class="hljs-number">89434994450522445031250973494975469910185057723838915257965779692637908486619</span>
q = <span class="hljs-number">97644675717314693028299287382143581611499104251746026552841672042065803811329</span>

phi = ( p - <span class="hljs-number">1</span> ) * ( q - <span class="hljs-number">1</span> )
d = inverse(e, phi)
m = pow(c, d, n)

<span class="hljs-built_in">print</span>(long_to_bytes(m))
</code></pre>
<p class="has-line-data" data-line-start="332" data-line-end="333">Ejecutando el script obtenemos la flag:</p>
<pre><code class="has-line-data" data-line-start="335" data-line-end="339" class="language-bash">┌──(root㉿kali)-[~/Descargas/incibe/<span class="hljs-number">8</span> semana/reto38]
└─$ python3 banderita.py          
b<span class="hljs-string">'flag{coppersmith_weak_rsa_roca_attack}'</span>
</code></pre>
<p class="has-line-data" data-line-start="339" data-line-end="340"><strong><em>flag{coppersmith_weak_rsa_roca_attack}</em></strong></p>
<hr>
<h1 class="code-line" data-line-start=342 data-line-end=343 ><a id="Fin_342"></a>Fin</h1>
<p class="has-line-data" data-line-start="344" data-line-end="345">Cualquier errata o duda es bienvenida.</p>

</div>
